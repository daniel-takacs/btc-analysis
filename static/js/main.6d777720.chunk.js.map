{"version":3,"sources":["A.jsx","B.jsx","C.jsx","App.js","index.js"],"names":["A","isLoading","pricesArray","prices","error","arr","bestStart","curStart","bestLength","curLength","i","length","bearishTrendCalc","sortedDates","j","push","sortDates","first","last","firstTimestamp","lastTimestamp","t1","Date","t2","dateFirst","getFullYear","getMonth","getDate","dateLast","timestampToDateConverter","B","volumes","differenceInDays","volumesArray","diff","data","sortDayVolume","max","timestamp","findHighestTradingVolume","date","t","C","min","Number","POSITIVE_INFINITY","timestampMin","timestampMax","decrease","bearishCounter","findMinAndMaxPriceDate","pricesData","sortDayPrices","timestamp1","timestamp2","dateMinPrice","dateMaxPrice","App","useState","setprices","setVolumes","setIsLoading","setError","startDateInput","setStartDateInput","endDateInput","setEndDateInput","firstDate","lastDate","diffInTime","getTime","Math","floor","diffInDaysCalculator","startDate","endDate","startTimestamp","endTimestamp","convertToTimestamp","API_URL","fetchData","fetch","then","res","json","total_volumes","catch","err","message","sortDayPrice","className","dateFormat","selected","onChange","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d777720.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction A({ isLoading, pricesArray, prices, error }) {\r\n\r\n    function bearishTrendCalc(arr){\r\n        let bestStart  = 0;\r\n        let curStart   = 0;\r\n        let bestLength = 1;\r\n        let curLength  = 1;\r\n\r\n        for(let i=0;i<arr.length;i++){\r\n            if(arr[i] < arr[i-1]){\r\n                curLength++\r\n                if(curLength > bestLength){\r\n                    bestStart = curStart\r\n                    bestLength = curLength\r\n                }\r\n            }else {\r\n                curStart = i\r\n                curLength = 1\r\n            }\r\n        }\r\n        return {bestStart, bestLength}\r\n    }\r\n    const {bestLength} = bearishTrendCalc(pricesArray)\r\n    \r\n    //sorting dates and pushing an array\r\n    let sortedDates = []  \r\n    function sortDates(arr){\r\n        for(let i=0; i<arr.length; i++){\r\n            for(let j=0; j<arr[i].length; j++){\r\n                sortedDates.push(arr[i][0])\r\n            }\r\n        }\r\n    }\r\n    sortDates(prices)\r\n\r\n    //get the first and the last date of array in timestamp\r\n    function readFirstAndLastDate(arr){\r\n        let first = arr[0]\r\n        let last = arr[arr.length - 1]\r\n        return {first, last}\r\n    }\r\n    const {first, last} = readFirstAndLastDate(sortedDates)\r\n\r\n    //converting timestamp to human date\r\n    function timestampToDateConverter(firstTimestamp, lastTimestamp){\r\n        let t1 = new Date(firstTimestamp)\r\n        let t2 = new Date(lastTimestamp)\r\n        let dateFirst = (t1.getFullYear()+\"/\"+(t1.getMonth()+1)+\"/\"+t1.getDate())\r\n        let dateLast = (t2.getFullYear()+\"/\"+(t2.getMonth()+1)+\"/\"+t2.getDate())\r\n        return {dateFirst, dateLast}\r\n    }\r\n    const {dateFirst, dateLast} = timestampToDateConverter(first, last)\r\n\r\n    return (\r\n        <div>\r\n            <h4>A: How many days in the longes bearish trend within a given date range?</h4>\r\n            {error && <p>{error}</p> }\r\n            {isLoading ? <p>{isLoading}</p> \r\n            : <p>In bitcoin's historical data from CoinGecko, the price decreased <strong> {bestLength} </strong> days in a row \r\n            for the inputs from <strong>{dateFirst}</strong> and to <strong>{dateLast}</strong>.</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default A\r\n","import React from 'react'\r\n\r\nfunction B({ volumes, differenceInDays, isLoading, error }) {\r\n\r\n  const volumesArray = []\r\n\r\n  const sortDayVolume = (diff, data)=> {\r\n    if(diff >= 90){\r\n      for(let i=0; i<data.length; i++){\r\n        volumesArray.push(data[i])\r\n      }\r\n    }else {\r\n      for(let i=0; i<data.length; i=i+23){\r\n        volumesArray.push(data[i])\r\n      }\r\n    }\r\n    return volumesArray\r\n  }\r\n  sortDayVolume(differenceInDays, volumes)\r\n\r\n  //finding highest trading volume\r\n\r\n    let max = 0\r\n    let timestamp = 0\r\n\r\n    function findHighestTradingVolume(arr){\r\n        for(let i=0; i<arr.length; i++){\r\n            for(let j=0; j<arr[i].length; j++){\r\n                if(arr[i][1] > max){\r\n                    max = arr[i][1]\r\n                    timestamp = arr[i][0]\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findHighestTradingVolume(volumesArray)\r\n   \r\n    function timestampToDateConverter(timestamp){\r\n        let t = new Date(timestamp)\r\n        let date = (t.getFullYear()+\"/\"+(t.getMonth()+1)+\"/\"+t.getDate())\r\n        return date\r\n    }\r\n    let date = timestampToDateConverter(timestamp)\r\n\r\n    return (\r\n        <div>\r\n            <h4>B: Which date within a given date range had the highest trading volume?</h4>\r\n            {error && <p>{error}</p> }\r\n            {isLoading ? <p>{isLoading}</p> \r\n            : <div>\r\n                <p><strong>{date}</strong> had the hihest trading volume and the volume on that day was <strong>{max}</strong> in euros.</p>\r\n              </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default B\r\n","import React from 'react'\r\n\r\nfunction C({ isLoading, prices, differenceInDays, error }) {\r\n\r\n  const sortDayPrices = (diff, data)=> {\r\n    const pricesData = []\r\n    if(diff >= 90){\r\n      for(let i=0; i<data.length; i++){\r\n        pricesData.push(data[i])\r\n      }\r\n    }else {\r\n      for(let i=0; i<data.length; i=i+23){\r\n        pricesData.push(data[i])\r\n      }\r\n    }\r\n    return pricesData\r\n  }\r\n  const pricesData = sortDayPrices(differenceInDays, prices)\r\n\r\n  //find the min and max price\r\n  \r\n  function findMinAndMaxPriceDate(arr){\r\n    \r\n    let min = Number.POSITIVE_INFINITY\r\n    let max = 0\r\n    let timestampMin = 0\r\n    let timestampMax = 0\r\n    let decrease = false\r\n    let bearishCounter = 0\r\n\r\n    for(let i=0; i<arr.length; i++){\r\n        for(let j=0; j<arr[i].length; j++){\r\n            if(arr[i][1] > max){\r\n                max = arr[i][1]\r\n                timestampMax = arr[i][0]\r\n            }else if (arr[i][1] < min){\r\n                min = arr[i][1]\r\n                timestampMin = arr[i][0]   \r\n                if(arr[i][1] < arr[i][1-1]) {\r\n                  bearishCounter++\r\n                }\r\n            } \r\n        }\r\n        if(bearishCounter === arr.length){\r\n          decrease = true\r\n        }\r\n    }\r\n    return {timestampMin, timestampMax, decrease}\r\n  }\r\n  const {timestampMin, timestampMax, decrease} = findMinAndMaxPriceDate(pricesData)\r\n  \r\n  function timestampToDateConverter(timestamp1, timestamp2){\r\n      let t1 = new Date(timestamp1)\r\n      let t2 = new Date(timestamp2)\r\n      let dateMinPrice = (t1.getFullYear()+\"/\"+(t1.getMonth()+1)+\"/\"+t1.getDate())\r\n      let dateMaxPrice = (t2.getFullYear()+\"/\"+(t2.getMonth()+1)+\"/\"+t2.getDate())\r\n      return {dateMinPrice, dateMaxPrice }\r\n  }\r\n  const {dateMinPrice, dateMaxPrice} = timestampToDateConverter(timestampMin, timestampMax)\r\n\r\n  return (\r\n      <div>\r\n          <h4>C: Which the best day for buying bitcoin, and the best day for selling the bought bitcoin to maximize profits?</h4>\r\n          {error && <p>{error}</p>}\r\n          {isLoading ? <p>{isLoading}</p>\r\n          : decrease ? <p>You should not buy (nor sell) bitcoin on any of the days</p>\r\n          : <p>The best day <strong>{dateMinPrice}</strong> for buying bitcoin, and the best day <strong>{dateMaxPrice}</strong> for selling the bought bitcoin.</p>\r\n          }\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default C\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport A from './A'\r\nimport B from './B'\r\nimport C from './C'\r\n\r\nfunction App() {\r\n\r\n  const [prices, setprices] = useState([])\r\n  const [volumes, setVolumes] = useState([])\r\n  const [isLoading, setIsLoading] = useState('Answer')\r\n  const [error, setError] = useState(null)\r\n  const [startDateInput, setStartDateInput] = useState(new Date(\"2020/03/01\"))\r\n  const [endDateInput, setEndDateInput] = useState(new Date(\"2021/08/01\"))\r\n  const differenceInDays = diffInDaysCalculator(startDateInput, endDateInput)\r\n  const {startTimestamp, endTimestamp} = convertToTimestamp(startDateInput, endDateInput)\r\n  const API_URL = `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=${startTimestamp}&to=${endTimestamp}`\r\n\r\n  //check how many days in given date range\r\n  function diffInDaysCalculator(firstDate, lastDate){\r\n      let diffInTime = lastDate.getTime() - firstDate.getTime()\r\n      let diffInDays = Math.floor(diffInTime / (1000 * 3600 * 24))\r\n      return diffInDays\r\n  }\r\n  //convert the given dates to timestamp\r\n  function convertToTimestamp(startDate, endDate){\r\n      let startTimestamp = Math.floor((new Date(startDate)).getTime() / 1000)\r\n      let endTimestamp = Math.floor((new Date(endDate)).getTime() / 1000)+(3*60*60) //giving 3 hour to get UTC / 3 hours to Current Timezone\r\n      return {startTimestamp, endTimestamp}\r\n  }\r\n  \r\n  const handleClick = ()=> {\r\n    fetchData()\r\n  }\r\n\r\n  const fetchData = ()=> {\r\n        setIsLoading('Loading...')\r\n        setError(null)\r\n        fetch(API_URL)\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            setIsLoading(false)\r\n            setprices(data.prices)\r\n            setVolumes(data.total_volumes)\r\n          })\r\n          .catch(err => {\r\n            setIsLoading(false)\r\n            setError(err.message)\r\n          })\r\n  }\r\n\r\n  //sorting prices to an array\r\n  const pricesArray = []\r\n\r\n  const sortDayPrice = (diff, data)=> {\r\n    if(diff >= 90){\r\n      for(let i=0; i<data.length; i++){\r\n          pricesArray.push(data[i][1])\r\n      }\r\n    }else {\r\n      for(let i=0; i<data.length; i=i+23){\r\n        pricesArray.push(data[i][1])\r\n      }\r\n    }\r\n    return pricesArray\r\n  }\r\n  sortDayPrice(differenceInDays, prices)\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <label>start date</label>\r\n        <div>\r\n          <DatePicker dateFormat=\"yyyy-MM-dd\" selected={startDateInput} onChange={date => setStartDateInput(date)}\r\n                      startDateInput={startDateInput} endDateInput={endDateInput}/>\r\n        </div>\r\n        <label>end date</label>\r\n        <div>\r\n          <DatePicker dateFormat=\"yyyy-MM-dd\" selected={endDateInput} onChange={date => setEndDateInput(date)}/>\r\n        </div>\r\n        <div>\r\n          <button onClick={handleClick}>Get the data</button>\r\n        </div>\r\n        <div>\r\n          <A prices={prices} isLoading={isLoading} pricesArray={pricesArray} error={error}/>\r\n          <B volumes={volumes} isLoading={isLoading} differenceInDays={differenceInDays}error={error}/>\r\n          <C prices={prices} isLoading={isLoading} pricesArray={pricesArray} differenceInDays={differenceInDays}error={error}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}